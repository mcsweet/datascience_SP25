mean_e = mean(E)
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
group_by(angle) %>%
mean(E)
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
group_by(angle) %>%
summarise(nu = mean(nu))
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
## TASK: Investigate your question from q1 here
df_stang_long %>%
group_by(angle) %>%
summarise(mean_e = mean(E))
ggplot(aes(x = nu, y = thick)) +
geom_point()
## TASK: Investigate your question from q1 here
df_stang_long %>%
group_by(angle) %>%
summarise(mean_e = mean(E))
ggplot(aes(x = angle, y = E)) +
geom_point()
## TASK: Investigate your question from q1 here
df_stang_long %>%
group_by(angle) %>%
summarise(mean_e = mean(E)) %>%
ggplot(aes(x = angle, y = E)) +
geom_point()
## TASK: Investigate your question from q1 here
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_point()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_point()
View(angle_V_E_mean)
View(angle_V_E_mean)
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_bar()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_col()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = mean(E))) +
geom_col()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = mean)) +
geom_line()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_smooth()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_plot()
## TASK: Investigate your question from q1 here
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_long %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, color = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
angle_V_E_mean <-
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()+
geom_point()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_point()
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_point()
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
df_stang_long %>%
group_by(angle) %>%
summarise(E = mean(E))
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_point()
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
## transform angle values from integeter to characters
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
## summarise the mean of E for each angle
df_stang_long %>%
group_by(angle) %>%
summarise(E = median(E))
## scatter plot of angle and youngs modulus
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_point()
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TASK: Investigate your question from q1 here
## transform angle values from integeter to characters
df_stang_plot <-
df_stang_long %>%
transform(angle = as.character(angle))
## summarise the median and mean of E for each angle
df_stang_long %>%
group_by(angle) %>%
summarise(
Median_E = median(E),
Mean_E = mean(E)
)
## scatter plot of angle and youngs modulus
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_point()
df_stang_plot %>%
group_by(angle) %>%
ggplot(aes(x = angle, y = E, fill = angle)) +
geom_boxplot()
## TODO: Compute summaries
df_q1 <- df_michelson %>%
group_by(Distinctness) %>%
summarize(
n = n(),
MeanVelocity = mean(Velocity)
)
# Libraries
library(tidyverse)
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/1av_SXn4j0-4Rk0mQFik3LLr-uf0YdA06i3ugE6n-Zdo/edit?usp=sharing"
# Parameters
LIGHTSPEED_VACUUM    <- 299792.458 # Exact speed of light in a vacuum (km / s)
LIGHTSPEED_MICHELSON <- 299944.00  # Michelson's speed estimate (km / s)
LIGHTSPEED_PM        <- 51         # Michelson error estimate (km / s)
## Note: No need to edit this chunk!
gs4_deauth()
ss <- gs4_get(url)
df_michelson <-
read_sheet(ss) %>%
select(Date, Distinctness, Temp, Velocity) %>%
mutate(Distinctness = as_factor(Distinctness))
df_michelson %>% glimpse()
## TODO: Compute summaries
df_q1 <- df_michelson %>%
group_by(Distinctness) %>%
summarize(
n = n(),
MeanVelocity = mean(Velocity)
)
df_q1 %>%
arrange(desc(Distinctness)) %>%
knitr::kable()
## TODO: Adjust the data, assign to df_q2
df_q2 <- df_michelson %>%
mutate(
VelocityVacuum = Velocity + 92
)
df_q2 %>%
arrange(desc(Distinctness)) %>%
knitr::kable()
## TODO: Compare Michelson's estimate and error against the true value
## Your code here!
tibble(
Michelson_LIGHTSPEED = LIGHTSPEED_MICHELSON,
LowerBound = LIGHTSPEED_MICHELSON - LIGHTSPEED_PM,
UpperBound = LIGHTSPEED_MICHELSON + LIGHTSPEED_PM,
Vacuum_LIGHTSPEED = LIGHTSPEED_VACUUM,
Error = LIGHTSPEED_VACUUM - LIGHTSPEED_MICHELSON
)
# print(LowerBound)
# print(UpperBound)
# print(LIGHTSPEED_VACUUM)
## Note: No need to edit this chunk!
## Calibrate simulated data
v_mean <-
df_q2 %>%
summarize(m = mean(VelocityVacuum)) %>%
pull(m)
v_sd <-
df_q2 %>%
summarize(s = sd(VelocityVacuum)) %>%
pull(s)
## Visualize
set.seed(101)
df_q2 %>%
mutate(Simulated = rnorm(n(), mean = v_mean, sd = v_sd)) %>%
rename(Real = VelocityVacuum) %>%
pivot_longer(
cols = c(Simulated, Real),
names_to = "source",
values_to = "velocity"
) %>%
ggplot(aes(Date, velocity)) +
geom_hline(
yintercept = LIGHTSPEED_MICHELSON,
linetype = "dotted"
) +
geom_hline(
yintercept = LIGHTSPEED_MICHELSON - LIGHTSPEED_PM,
linetype = "dashed"
) +
geom_hline(
yintercept = LIGHTSPEED_MICHELSON + LIGHTSPEED_PM,
linetype = "dashed"
) +
geom_line(
data = . %>%
group_by(Date, source) %>%
summarize(velocity_mean = mean(velocity)),
mapping = aes(y = velocity_mean),
color = "grey50"
) +
geom_point(
mapping = aes(y = velocity),
size = 0.8
) +
facet_grid(source~.) +
theme_minimal() +
labs(
x = "Date of Measurement (1879)",
y = "Velocity (in Vacuum)"
)
df_q2 %>%
ggplot(aes(VelocityVacuum, color = Distinctness)) +
geom_density() +
labs(title = "Density of Measured Velocity Values Per Distinctness", x = "Velocity of Light", y = "Density")
df_q2 %>%
ggplot(aes( x = Temp, y =VelocityVacuum)) +
geom_smooth() +
labs(title = "Trends of Velocity in Vacuum vs. Temperature", x = "Temperature", y = "Velocity of Light")
df_q5 <-
df_q2 %>%
mutate(
Day = wday(Date, label = TRUE)
)
#plot density vs day of week
df_q5 %>%
ggplot(aes(VelocityVacuum, color = Day)) +
geom_density() +
labs(title = "Density of Measured Velocity Vs. Day of The Week", x = "Velocity of Light", y = "Density")
df_q5 %>%
ggplot(aes(x = Day, y = VelocityVacuum, fill = Day)) +
geom_boxplot() +
geom_hline(
yintercept = LIGHTSPEED_VACUUM,
linetype = "dotted"
) +
labs(title = "Day of Week vs. Measured Velocity of Light Compared to Real Velocity of Light", x = "Day of The Week", y = "Velocity of Light")
## TODO: Adjust the data, assign to df_q2
df_q2 <- df_michelson %>%
mutate(
VelocityVacuum = Velocity + 92
)
df_q2 %>%
arrange(desc(Distinctness))
## TODO: Compare Michelson's estimate and error against the true value
## Your code here!
tibble(
Michelson_LIGHTSPEED = LIGHTSPEED_MICHELSON,
LowerBound = LIGHTSPEED_MICHELSON - LIGHTSPEED_PM,
UpperBound = LIGHTSPEED_MICHELSON + LIGHTSPEED_PM,
Vacuum_LIGHTSPEED = LIGHTSPEED_VACUUM,
Error = LIGHTSPEED_VACUUM - LIGHTSPEED_MICHELSON,
Ratio = LIGHTSPEED_PM / error
)
## TODO: Compare Michelson's estimate and error against the true value
## Your code here!
tibble(
Michelson_LIGHTSPEED = LIGHTSPEED_MICHELSON,
LowerBound = LIGHTSPEED_MICHELSON - LIGHTSPEED_PM,
UpperBound = LIGHTSPEED_MICHELSON + LIGHTSPEED_PM,
Vacuum_LIGHTSPEED = LIGHTSPEED_VACUUM,
Error = LIGHTSPEED_VACUUM - LIGHTSPEED_MICHELSON,
Ratio = LIGHTSPEED_PM / Error
)
# print(LowerBound)
# print(UpperBound)
# print(LIGHTSPEED_VACUUM)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gapminder)
## TODO: Fix the following code
gapminder %>%
filter(continent == "Asia") %>%
ggplot(aes(year, lifeExp)) +
geom_line()
## TODO: Fix the following code
gapminder %>%
filter(continent == "Asia") %>%
ggplot(aes(year, lifeExp, color = country)) +
geom_line()
## TODO: No need to edit; just answer the questions
mpg %>%
ggplot(aes(displ, hwy)) +
geom_line()
## TODO: No need to edit; just interpret the graph
economics %>%
ggplot(aes(date, unemploy)) +
geom_line(aes(color = "Raw")) +
geom_smooth(aes(color = "Smoothed"), se = FALSE) +
scale_color_discrete(name = "Source")
