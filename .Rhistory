#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age)) +
geom_density()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x = Household_Size, y = Age_First_Friend)) +
geom_jitter() +
geom_smooth()
#AGE FIRST FIREND, MOVED LATER, HOUSEHOLD SIZE
df_islands %>%
filter(Consent == "yes") %>%
arrange(desc(Age)) %>%
ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
geom_jitter()
#HAVE PET AND AGE OF FIRST FRIEND
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x  = Have_pet, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Have_pet), width = 0.5) +
geom_jitter()
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
filter(Have_pet == "pet") %>%
ggplot(aes(x  = Type_of_Animal, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Type_of_Animal), width = 0.5) +
geom_jitter()
#Housenumber vs pet
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x  = House_Number, y = Type_of_Animal, color = Type_of_Animal)) +
geom_jitter()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age_First_Friend)) +
geom_density()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x = Household_Size, y = Age_First_Friend)) +
geom_jitter() +
geom_smooth()
#AGE FIRST FIREND, MOVED LATER, HOUSEHOLD SIZE
df_islands %>%
filter(Consent == "yes") %>%
arrange(desc(Age)) %>%
ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
geom_jitter()
#HAVE PET AND AGE OF FIRST FRIEND
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x  = Have_pet, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Have_pet), width = 0.5) +
geom_jitter()
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
filter(Have_pet == "pet") %>%
ggplot(aes(x  = Type_of_Animal, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Type_of_Animal), width = 0.5) +
geom_jitter()
#Housenumber vs pet
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x  = House_Number, y = Type_of_Animal, color = Type_of_Animal)) +
geom_jitter()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age_First_Friend)) +
geom_density()
#household size
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Household_Size)) +
geom_density()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x = Household_Size, y = Age_First_Friend)) +
geom_jitter() +
geom_smooth()
#AGE FIRST FIREND, MOVED LATER, HOUSEHOLD SIZE
df_islands %>%
filter(Consent == "yes") %>%
arrange(desc(Age)) %>%
ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
geom_jitter()
#HAVE PET AND AGE OF FIRST FRIEND
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x  = Have_pet, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Have_pet), width = 0.5) +
geom_jitter()
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
filter(Have_pet == "pet") %>%
ggplot(aes(x  = Type_of_Animal, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Type_of_Animal), width = 0.5) +
geom_jitter()
#Housenumber vs pet
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x  = House_Number, y = Type_of_Animal, color = Type_of_Animal)) +
geom_jitter()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age_First_Friend)) +
geom_density()
#household size
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Household_Size)) +
geom_bar()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x = Household_Size, y = Age_First_Friend)) +
geom_jitter() +
geom_smooth()
#AGE FIRST FIREND, MOVED LATER, HOUSEHOLD SIZE
df_islands %>%
filter(Consent == "yes") %>%
arrange(desc(Age)) %>%
ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
geom_jitter()
#HAVE PET AND AGE OF FIRST FRIEND
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x  = Have_pet, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Have_pet), width = 0.5) +
geom_jitter()
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
filter(Have_pet == "pet") %>%
ggplot(aes(x  = Type_of_Animal, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Type_of_Animal), width = 0.5) +
geom_jitter()
#Housenumber vs pet
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x  = House_Number, y = Type_of_Animal, color = Type_of_Animal)) +
geom_jitter()
source("~/.active-rstudio-document", echo=TRUE)
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age_First_Friend)) +
geom_density()
#household size
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Household_Size)) +
geom_bar(stat = Household_Size)
library(tidyverse)
library(rsample)
# TODO: Include any other packages you need
# filename_islands <- "./data/Data_C10.csv"
#
# ## NOTE: No need to edit
# df_islands <-
#   read_csv(
#     filename_islands
#   )
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age_First_Friend)) %>%
#   ggplot(aes(x  = Age_First_Friend, fill = Have_pet)) +
#   geom_bar(position = "dodge")
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age, y = Age_First_Friend, color = Have_pet)) +
#   geom_jitter()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Have_pet)) +
#   geom_jitter()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
#   geom_jitter()
#
# df_islands %>%
#    filter(Consent == "yes") %>%
#    filter(Have_pet == "pet") %>%
#    filter(Moved_Later == "no") %>%
#    ggplot(aes(x  = Type_of_Animal, y = Age)) +
#    geom_boxplot()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   ggplot(aes(x = Age)) +
#   geom_histogram(bins = 20)
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age_First_Friend)) +
geom_density()
# filename_islands <- "./data/Data_C10.csv"
#
# ## NOTE: No need to edit
# df_islands <-
#   read_csv(
#     filename_islands
#   )
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age_First_Friend)) %>%
#   ggplot(aes(x  = Age_First_Friend, fill = Have_pet)) +
#   geom_bar(position = "dodge")
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age, y = Age_First_Friend, color = Have_pet)) +
#   geom_jitter()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Have_pet)) +
#   geom_jitter()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
#   geom_jitter()
#
# df_islands %>%
#    filter(Consent == "yes") %>%
#    filter(Have_pet == "pet") %>%
#    filter(Moved_Later == "no") %>%
#    ggplot(aes(x  = Type_of_Animal, y = Age)) +
#    geom_boxplot()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   ggplot(aes(x = Age)) +
#   geom_histogram(bins = 20)
filename_islands <- "./data/Data_C10.csv"
df_islands <-
read_csv(
filename_islands
)
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age_First_Friend)) %>%
#   ggplot(aes(x  = Age_First_Friend, fill = Have_pet)) +
#   geom_bar(position = "dodge")
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age, y = Age_First_Friend, color = Have_pet)) +
#   geom_jitter()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Have_pet)) +
#   geom_jitter()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   arrange(desc(Age)) %>%
#   ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
#   geom_jitter()
#
# df_islands %>%
#    filter(Consent == "yes") %>%
#    filter(Have_pet == "pet") %>%
#    filter(Moved_Later == "no") %>%
#    ggplot(aes(x  = Type_of_Animal, y = Age)) +
#    geom_boxplot()
#
# df_islands %>%
#   filter(Consent == "yes") %>%
#   ggplot(aes(x = Age)) +
#   geom_histogram(bins = 20)
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Age_First_Friend)) +
geom_density()
#household size
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x = Household_Size)) +
geom_bar()
#age of first friend
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x = Household_Size, y = Age_First_Friend)) +
geom_jitter() +
geom_smooth()
#AGE FIRST FIREND, MOVED LATER, HOUSEHOLD SIZE
df_islands %>%
filter(Consent == "yes") %>%
arrange(desc(Age)) %>%
ggplot(aes(x  = Age_First_Friend, y = Household_Size, color = Moved_Later)) +
geom_jitter()
#HAVE PET AND AGE OF FIRST FRIEND
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
ggplot(aes(x  = Have_pet, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Have_pet), width = 0.5) +
geom_jitter()
df_islands %>%
filter(Consent == "yes") %>%
filter(Moved_Later == "no") %>%
filter(Have_pet == "pet") %>%
ggplot(aes(x  = Type_of_Animal, y = Age_First_Friend)) +
geom_boxplot(aes(fill = Type_of_Animal), width = 0.5) +
geom_jitter()
#Housenumber vs pet
df_islands %>%
filter(Consent == "yes") %>%
ggplot(aes(x  = House_Number, y = Type_of_Animal, color = Type_of_Animal)) +
geom_jitter()
library(tidyverse)
library(rsample)
## NOTE: No need to edit; this visual helps explain the pi estimation scheme
tibble(x = seq(0, 1, length.out = 100)) %>%
mutate(y = sqrt(1 - x^2)) %>%
ggplot(aes(x, y)) +
annotate(
"rect",
xmin = 0, ymin = 0, xmax = 1, ymax = 1,
fill = "grey40",
size = 1
) +
geom_ribbon(aes(ymin = 0, ymax = y), fill = "coral") +
geom_line() +
annotate(
"label",
x = 0.5, y = 0.5, label = "Sc",
size = 8
) +
annotate(
"label",
x = 0.8, y = 0.8, label = "St",
size = 8
) +
scale_x_continuous(breaks = c(0, 1/2, 1)) +
scale_y_continuous(breaks = c(0, 1/2, 1)) +
theme_minimal() +
coord_fixed()
## TASK: Choose a sample size and generate samples
n <- 40000 # Choose a sample size
x <- runif(n, min = 0, max = 1)
y <- runif(n, min = 0, max = 1)
df_q1 <-
tibble(x,y)
df_q1
## NOTE: Do not edit this code
# Correct sample size
assertthat::assert_that(
dim(df_q1) %>%
.[[1]] == n,
msg = "The sample size should be `n`"
)
# Correct column names
assertthat::assert_that(
setequal(names(df_q1), c("x", "y")),
msg = "df_q1 must include the columns `x` and `y`"
)
print("Good")
## TASK: Finish implementing this function
stat <- function(x, y) {
r <- sqrt(x^2 + y^2)
in_circle <- r <= 1
stat <- 4 * in_circle
}
## TASK: Finish writing these assert statements
# Check the value for points *inside* the circle
assertthat::assert_that(
tibble(x = 0.1, y = 0.1) %>% # Pick a point *inside* the circle
mutate(stat = stat(x, y)) %>%
pull(stat) %>%
.[[1]] == 4,
# ???, # Write the correct value of stat() here
msg = "Incorrect value when a point is inside the circle"
)
# Check the value for points *outside* the circle
assertthat::assert_that(
tibble(x = 0.9, y = 0.9) %>% # Pick a point *outside* the circle
mutate(stat = stat(x, y)) %>%
pull(stat) %>%
.[[1]] == 0,
# ???, # Write the correct value of stat() here
msg = "Incorrect value when a point is outside the circle"
)
print("Your assertions passed, but make sure they're checking the right thing!")
## TASK: Estimate pi using your data from q1
df_q3 <-
df_q1 %>%
# mutate(sum_sq = x^2 + y^2) %>%
# filter(sum_sq <= 1)%>%
#summarise(pi_est = 4 * length(sum_sq)/n)
mutate(stat = stat(x,y)) %>%
summarize(pi_est = mean(stat))
df_q3
## NOTE: Do not edit this code
# Correct sample size
assertthat::assert_that(
dim(df_q3) %>%
.[[1]] == 1,
msg = "This result should have just one row"
)
# Correct column names
assertthat::assert_that(
setequal(names(df_q3), c("pi_est")),
msg = "df_q3 must include the column `pi_est`"
)
print("Good")
## TASK: Finish the code below
df_q4 <-
df_q1 %>%
bootstraps(., times = 1000) %>%
mutate(
pi_est = map_dbl(
splits,
function(split_df) {
analysis(split_df) %>%
# Estimate pi (pi_est) using the resampled data;
# this should be *identical* to the
# code you wrote for q3
mutate(stat = stat(x,y)) %>%
summarize(pi_est = mean(stat)) %>%
pull(pi_est)
}
)
)
## NOTE: Do not edit; use this to visualize your results
df_q4 %>%
ggplot(aes(pi_est)) +
geom_histogram()
## TASK: Compute a bootstrap confidence interval at the 95% level (alpha = 0.05)
z_c <- qnorm( 1 - (1 - 0.95) / 2 )
df_q5 <-
df_q4 %>%
summarize(
mean = mean(pi_est),
sd = sd(pi_est),
se = sd(pi_est)/sqrt(length(pi_est)),
pi_lo = mean(pi_est) - z_c * sd(pi_est) / sqrt(length(pi_est)),
pi_hi = mean(pi_est) + z_c * sd(pi_est) / sqrt(length(pi_est))
)
df_q5
df_q1 %>%
mutate(stat = stat(x,y)) %>%
summarize(
mean_pi = mean(stat),
sd_pi = sd(stat),
z_c = qnorm( 1 - (1 - 0.95) / 2 ),
se_pi = sd_pi/sqrt(length(stat)),
pi_lo = mean_pi - z_c * sd_pi / sqrt(length(stat)),
pi_hi = mean_pi + z_c * sd_pi / sqrt(length(stat))
)
## TASK: Compute a bootstrap confidence interval at the 95% level (alpha = 0.05)
alpha <- 0.05
df_q5 <-
df_q4 %>%
summarize(
mean_lo = quantile(sample_mean, alpha / 2),
mean_up = quantile(sample_mean, 1 - alpha / 2)
)
## TASK: Compute a bootstrap confidence interval at the 95% level (alpha = 0.05)
alpha <- 0.05
df_q5 <-
df_q4 %>%
summarize(
mean_lo = quantile(mean(pi_est), alpha / 2),
mean_up = quantile(mean(pi_est), 1 - alpha / 2)
)
df_q5
## TASK: Compute a bootstrap confidence interval at the 95% level (alpha = 0.05)
alpha <- 0.05
df_q5 <-
df_q4 %>%
summarize(
mean_lo = quantile(pi_est, alpha / 2),
mean_up = quantile(pi_est, 1 - alpha / 2)
)
df_q5
