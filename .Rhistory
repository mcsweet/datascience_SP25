diamonds %>%
summary()
diamonds %>%
summary(
)
?diamonds
?diamonds
glimpse(diamonds)
## TODO: Complete this code
ggplot(diamonds)
## TODO: Complete this code
ggplot(diamonds) +
geom_point(aes(x = carat, y = price))
## TODO: Complete this code
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
library(tidyverse)
## TASK: Plot `price` vs `carat` below
## Your code here!
ggplot(diamonds) +
geom_point(aes(x = carat, y = price))
## TASK: Plot `price`, `carat`, and `cut` below
## Your code here!
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
## TASK: Plot `price`, `carat`, and `cut` below
## Your code here!
ggplot(diamonds) +
geom_point(aes(x = price, y = carat, color = cut))
## TASK: Plot `price`, `carat`, and `cut` below
## Your code here!
ggplot(diamonds) +
geom_point(aes(x = cut, y = price, color = carat))
## TASK: Plot `price`, `carat`, and `cut` below
## Your code here!
ggplot(diamonds) +
geom_point(aes(x = cut, y = price, color = carat))
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
# knitr options
knitr::opts_chunk$set(echo = TRUE)
glimpse(diamonds)
summary(diamonds)
glimpse(diamonds)
summary(diamonds)
diamonds %>%
ggplot(aes(cut)) +
geom_bar()
diamonds %>%
ggplot(aes(cut, price)) +
geom_point()
diamonds %>%
ggplot(aes(cut, price)) +
geom_boxplot()
diamonds %>%
ggplot(aes(cut, carat)) +
geom_boxplot()
library(tidyverse)
library(nycflights13) # For `flights` data
flights %>% glimpse()
## df_q1 <- TODO: Your code goes here!
df_d1 <- flights %>% select(_time,ends_with())
## df_q1 <- TODO: Your code goes here!
df_d1 <- flights %>% select(ends_with(_time))
## df_q1 <- TODO: Your code goes here!
df_d1 <- flights %>% select(ends_with("_time"))
df_q1
## df_q1 <- TODO: Your code goes here!
df_d1 <- flights %>% select(ends_with("_time"))
df_q1
## df_q1 <- TODO: Your code goes here!
df_q1 <- flights %>% select(ends_with("_time"))
df_q1
## NOTE: No need to change this
assertthat::assert_that(
all(names(df_q1) %>% str_detect(., "_time$"))
)
print("Nice!")
?dplyr
browseVignettes(package = "dplyr")
df_q2 <- flights %>%
select("dest", "origin", "carrier", everything()) # TODO: Modify to move columns to the front
df_q2
## NOTE: No need to change this
assertthat::assert_that(
assertthat::are_equal(names(df_q2)[1:5], c("dest", "origin", "carrier", "year", "month"))
)
print("Well done!")
## flights %>% filter(dest = LAX) # Uncomment and run to see error
flights %>%
filter(dest == LAX)
## flights %>% filter(dest = LAX) # Uncomment and run to see error
flights %>%
filter(dest == "LAX")
BOS <- "LGA"
flights %>% filter(dest == BOS)
BOS <- "LGA"
flights %>% filter(dest == "BOS")
## df_q5a <- dest is JFK, LGA, or EWR
flights %>%
filter(dest == "JFK" | dest == "LGA" | dest == "EWR")
## df_q5b <- origin is JFK, LGA, or EWR
flights %>%
filter(origin == "JFK" | origin == "LGA" | origin == "EWR")
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <-
flights %>%
filter(
dest == "JFK" | dest == "LGA" | dest == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
df_q5b
## df_q5a <- dest is JFK, LGA, or EWR
df_q5a <-
flights %>%
filter(
dest == "JFK" | dest == "LGA" | dest == "EWR"
)
## df_q5b <- origin is JFK, LGA, or EWR
df_q5b <-
flights %>%
filter(
origin == "JFK" | origin == "LGA" | origin == "EWR"
)
## NOTE: No need to change this!
assertthat::assert_that(
df_q5a %>%
mutate(flag = dest %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
assertthat::assert_that(
df_q5b %>%
mutate(flag = origin %in% c("JFK", "LGA", "EWR")) %>%
summarize(flag = all(flag)) %>%
pull(flag)
)
print("Nice!")
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select("air_time", "dest", everything())
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select("air_time", "dest", everything())
arrange(desc == "air_time")
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select("air_time", "dest", everything())
arrange(desc = "air_time")
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select("air_time", "dest", everything())
arrange(desc == air_time)
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select("air_time", "dest", everything()) %>%
arrange(desc == air_time)
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select(air_time, dest, everything()) %>%
arrange(desc(air_time)
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select(air_time, dest, everything()) %>%
arrange(desc(air_time)
df_q6
## df_q6 <- TODO: Your code here!
df_q6 <-
flights %>%
select(air_time, dest, everything()) %>%
arrange(desc(air_time))
df_q6
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% head(1) %>% pull(air_time),
flights %>% pull(air_time) %>% max(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
df_q6 %>% filter(!is.na(air_time)) %>% tail(1) %>% pull(air_time),
flights %>% pull(air_time) %>% min(na.rm = TRUE)
)
)
assertthat::assert_that(
assertthat::are_equal(
names(df_q6)[1:2],
c("air_time", "dest")
)
)
print("Great job!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
mpg %>%
ggplot(aes(trans)) +
geom_bar()
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mpg %>%
ggplot(aes(trans)) +
geom_bar()
mpg %>%
#ggplot(aes(trans)) +
#geom_bar()
count(trans)
ggplot(aes(x = trans, y = n)) +
geom_col()
mpg %>%
#ggplot(aes(trans)) +
#geom_bar()
count(trans) %>%
ggplot(aes(x = trans, y = n)) +
geom_col()
## NOTE: Run this chunk for an illustration
mpg %>% filter(cty == 20)
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col()
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col(position = 'dodge')
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col()
mpg %>%
ggplot(aes(x = cty, y = hwy)) +
geom_col(position = 'dodge')
## NOTE: Run this chunk for an illustration
mpg %>%
ggplot(aes(cty, hwy)) +
geom_point()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = class)) +
geom_bar()
## TODO: Run this code without changing, describe your observations on the data
mpg %>%
ggplot(aes(class, fill = drv)) +
geom_bar()
mpg %>%
ggplot(aes(x = manufacturer, fill = class), position = "dodge") +
geom_bar() +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
mpg %>%
ggplot(aes(x = manufacturer, fill = class)) +
geom_bar( position = "dodge") +
theme(axis.text.x = element_text(angle = 270, vjust = 0.5, hjust = 0))
mpg %>%
ggplot(aes(x = cyl)) +
geom_bar() +
facet_grid(~ manufacturer)
mpg %>%
ggplot(aes(x = cyl)) +
geom_bar() +
facet_wrap(~ manufacturer)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## Version 1
filter(diamonds, cut == "Ideal")
## Version 2
diamonds %>% filter(cut == "Ideal")
df_q2
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q2 %>% pull(n_ideal),
21551
)
)
df_q2 <-   #calling this data frame
diamonds %>%   #use this information
summarise(n_ideal = sum(cut == "Ideal"))
# and find the number of rows that have ideal cuts
df_q2  #call the variable to print it
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q2 %>% pull(n_ideal),
21551
)
)
print("Great job!")
diamonds %>%
## group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
#group_by(color, clarity) %>%
summarize(price = mean(price))
diamonds %>%
group_by(color, clarity) %>%
summarize(price = mean(price))
na.rm = TRUE
?naprint.omit
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y),
diff = depth - depth_computed
) %>%
summarize(
depth_mean = mean(depth, nr.rm = TRUE),
depth_sd = sd(depth, nr.rm = TRUE),
cov_depth = depth_sd/depth_mean,
diff_mean = mean(diff, nr.rm = TRUE),
diff_sd = sd(diff, nr.rm = TRUE),
cov_diff = diff_sd/diff_mean,
)
## TODO: Compute the `cov_depth` and `cov_diff` and assign the result to df_q4
df_q4 <-
diamonds %>%
mutate(depth_computed = 100 * 2 * z / (x + y),
diff = depth - depth_computed
) %>%
summarize(
depth_mean = mean(depth, na.rm = TRUE),
depth_sd = sd(depth, na.rm = TRUE),
cov_depth = depth_sd/depth_mean,
diff_mean = mean(diff, na.rm = TRUE),
diff_sd = sd(diff, na.rm = TRUE),
cov_diff = diff_sd/diff_mean,
)
df_q4
## NOTE: No need to change this!
assertthat::assert_that(abs(df_q4 %>% pull(cov_depth) - 0.02320057) < 1e-3)
assertthat::assert_that(abs(df_q4 %>% pull(cov_diff) - 497.5585) < 1e-3)
print("Nice!")
View(df_q4)
## TODO: Assign result to df_q5
df_q5 <-
diamonds %>%
group_by(cut) %>%
summarize(
price_mean = mean(price),
price_sd = sd(price),
price_cov = price_sd / price_mean
)
df_q5
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
df_q5 %>%
select(cut, price_cov) %>%
mutate(price_cov = round(price_cov, digits = 3)),
tibble(
cut = c("Fair", "Good", "Very Good", "Premium", "Ideal"),
price_cov = c(0.817, 0.937, 0.988, 0.949, 1.101)
) %>%
mutate(cut = fct_inorder(cut, ordered = TRUE))
)
)
print("Excellent!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## NOTE: No need to modify
mpg %>%
ggplot(aes(cty, color = class)) +
geom_freqpoly(bins = 10)
## NOTE: No need to modify
mpg %>%
ggplot(aes(cty, color = class)) +
geom_density()
?cty
??cty
?diamonds
?mpg
mpg %>%
ggplot(aes(cty, color = class)) +
geom_density()
mpg %>%
ggplot(aes(cty)) +
geom_density()
facet_wrap(~class, scales = "free_y")
mpg %>%
ggplot(aes(cty)) +
geom_density() +
facet_wrap(~class, scales = "free_y")
mpg %>%
ggplot(aes(cty)) +
geom_density() +
facet_wrap(~class, scales = "free_y")
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.01, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.2, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.1, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.08, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.2, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.04, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.01, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.04, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.06, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.002, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.004, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.006, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.008, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
## TODO: Run this chunk; play with differnet bin widths
diamonds %>%
filter(carat < 1.1) %>%
ggplot(aes(carat)) +
geom_histogram(binwidth = 0.01, boundary = 0.005) +
scale_x_continuous(
breaks = seq(0, 1, by = 0.1)
)
