## Your code here
rnorm(help)
## Your code here
rnorm()
## Your code here
?rnorm
## Your code here
getAnywhere(rnorm)
## Your code here
getAnywhere(rnorm)
?library
library()
library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
head(iris)
library(tidyverse)
library(tidyverse)
load(tidyverse)
load("tidyverse")
library(tidyverse)
library(tidyverse)
?diamonds
glimpse(diamonds)
summary(diamonds)
diamonds %>%
group_by(cut) %>%
summarize(carat_mean = mean(carat))
diamonds %>% summary
?read_csv
?read_csv
read_csv("./data/tiny.csv")
library(tidyverse)
## TODO: Re-write the code above following the tidyverse style guide
vignette("dplyr")
## TODO: Re-write the code above following the tidyverse style guide
vignette("dplyr")
## TODO: Re-write the code above following the tidyverse style guide
vignette(package ="dplyr")
## TODO: Re-write the code above following the tidyverse style guide
vignette(package ="dplyr")
vignette(???, package = "dplyr")
iris %>%
as_tibble() %>%
filter(Species == "setosa")
# TODO: Filter on Species "setosa"
)
iris %>%
as_tibble() %>%
filter(Species == "setosa"
# TODO: Filter on Species "setosa"
)
?as_tibble
?function
?function()
?function
?dplyr
## TODO: Consult the docs; Write your code here
?filter
## TODO: Consult the docs; Write your code here
?dplyr
## TODO: Consult the docs; Write your code here
?dplyr
iris %>%
as_tibble() %>%
filter(<= 6.4 Sepal.Length,
## TODO: Consult the docs; Write your code here
?dplyr
iris %>%
as_tibble() %>%
filter( 6.4 >= Sepal.Length,
5.1 <= Sepal.Length)
?cut_number
?cut_number
#ggplot2
?parse_number
?cut_number
#ggplot2
?parse_number
#readr
?row_number
library(tidyverse)
## Original code; hard to read
summarize(group_by(diamonds, cut), mean_price = mean(price))
library(tidyverse)
## Original code; hard to read
summarize(group_by(diamonds, cut), mean_price = mean(price))
## TODO: Re-write the code above following the tidyverse style guide
diamonds %>%
group_by(cut)
summarize(mean_price = mean(price))
## TODO: Re-write the code above following the tidyverse style guide
diamonds %>%
group_by(cut) %>%
summarize(mean_price = mean(price))
## TODO: Re-write the code above following the tidyverse style guide
diamonds %>%
group_by(cut) %>%
summarize(
mean_price = mean(price)
)
## TODO: Re-write the code above following the tidyverse style guide
iris %>%
mutate(Sepal.Area = Sepal.Length * Sepal.Width) %>%
group_by(Species) %>%
summarize_if(is.numeric, mean)%>%
ungroup() %>%
pivot_longer(
names_to = "measure", values_to = "value", cols=-Species) %>%
arrange(value)
## TODO: Re-write the code above following the tidyverse style guide
iris %>%
mutate(Sepal.Area = Sepal.Length * Sepal.Width) %>%
group_by(Species) %>%
summarize_if(is.numeric, mean)%>%
ungroup() %>%
pivot_longer(names_to = "measure", values_to = "value", cols = -Species) %>%
arrange(value)
iris %>%
pivot_longer(
names_to  = c("Part", ".value"),
names_sep = "\\.",
cols      = -Species
) %>%
ggplot(aes(Width, Length, color = Part)) +
geom_point()+
facet_wrap(~Species)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## TODO: Assign the appropriate vector to vec_q1
vec_q1
## TODO: Assign the appropriate vector to vec_q1
vec_q1 <- c(1, 2, 3)
vec_q1
## NOTE: No need to change this
assertthat::assert_that(length(vec_q1) == 3)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## TODO: Assign the appropriate vector to vec_q1
vec_q1 <- c(1, 2, 3)
vec_q1
## NOTE: No need to change this
assertthat::assert_that(length(vec_q1) == 3)
install.packages('assertthat')
## NOTE: No need to change this
assertthat::assert_that(length(vec_q1) == 3)
assertthat::assert_that(mean(vec_q1) == 2)
print("Nice!")
## TODO: Assign the appropriate vector to vec_q2
vec_q2 <- vec_q1 + c(4)
vec_q2
## NOTE: No need to change this
assertthat::assert_that(length(vec_q2) == 4)
## TODO: Assign the appropriate vector to vec_q2
vec_q2 <- vec_q1
vec_q2
## TODO: Assign the appropriate vector to vec_q2
vec_q2 <- c(4)
vec_q2
## NOTE: No need to change this
assertthat::assert_that(length(vec_q2) == 4)
## TODO: Assign the appropriate vector to vec_q2
vec_q2 <- c(vec_q1, 4)
vec_q2
## NOTE: No need to change this
assertthat::assert_that(length(vec_q2) == 4)
assertthat::assert_that(mean(vec_q2) == 2.5)
print("Well done!")
# knitr options
knitr::opts_chunk$set(echo = TRUE)
## TASK: Describe what went wrong here
## Set our airport
airport <- "BOS"
## Check our airport value
airport == ATL
## TASK: Describe what went wrong here
## Set our airport
airport <- "BOS"
## Check our airport value
airport == "ATL"
v_string <- c("00", "45", "90")
as.integer(v_string)
v_integer <- NA_real_
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
v_integer,
c(0L, 45L, 90L)
)
)
v_string <- c("00", "45", "90")
v_integer <- as.integer(v_string)
## NOTE: No need to change this!
assertthat::assert_that(
assertthat::are_equal(
v_integer,
c(0L, 45L, 90L)
)
)
print("Great job!")
library(tidyverse)
## NOTE: No need to edit; just run and inspect
diamonds %>%
slice_sample(n = 1000) %>%
ggplot(aes(carat, price)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(x = "", y = "")
## NOTE: No need to edit; just run and inspect
diamonds %>%
slice_sample(n = 1000) %>%
ggplot(aes(carat, price)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(x = "", y = "")
library(tidyverse)
# knitr options
knitr::opts_chunk$set(echo = TRUE)
inspect(cut)
?cut
glimpse(cut)
diamonds %>%
glimpse(cut)
diamonds
glimpse(cut)
diamonds
glimpse(cut)
diamonds %>%
glimpse("cut")
diamonds %>%
summary("cut")
diamonds %>%
summary()
diamonds %>%
summary(
)
?diamonds
?diamonds
glimpse(diamonds)
## TODO: Complete this code
ggplot(diamonds)
## TODO: Complete this code
ggplot(diamonds) +
geom_point(aes(x = carat, y = price))
## TODO: Complete this code
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = cut))
