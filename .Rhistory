df_cor_outliers <-
tibble(
x = X[, 1],
y = X[, 2]
) %>%
bind_rows(tibble(x = c(-10.1, -10, 10, 10.1), y = c(-1.2, -1.1, 1.1, 1.2)))
df_cor_outliers %>%
ggplot(aes(x, y)) +
geom_point()
df_cor_outliers %>%
summarize(rho = cor(x, y, method = "pearson"))
df_cor_outliers %>%
summarize(rho = cor(x, y, method = "spearman"))
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
## NOTE: No need to change this; setup
beatles1 <-
tribble(
~band, ~name,
"Beatles", "John",
"Beatles", "Paul",
"Beatles", "George",
"Beatles", "Ringo"
)
beatles2 <-
tribble(
~surname, ~instrument,
"McCartney",      "bass",
"Harrison",    "guitar",
"Starr",     "drums",
"Lennon",    "guitar"
)
bind_cols(beatles1, beatles2)
## NOTE: No need to change this; setup
beatles3 <-
tribble(
~name, ~surname,
"John", "Lennon",
"Paul", "McCartney",
"George", "Harrison",
"Ringo", "Starr"
)
beatles_joined <-
tribble(
~band, ~name, ~surname, ~instrument,
"Beatles", "John", "Lennon", "guitar",
"Beatles", "Paul", "McCartney", "bass",
"Beatles", "George", "Harrison", "guitar",
"Beatles", "Ringo", "Starr", "drums"
)
df_q2 <-
## TODO: Join beatles1 and beatles2 using beatles3 to match rows
beatles1 %>%
left_join(
beatles3,
by = "name"
) %>%
left_join(
beatles2,
by = "surname"
)
df_q2
## NOTE: No need to change this
assertthat::assert_that(all_equal(df_q2, beatles_joined))
print("Nice!")
criteria <-
## TODO: Use expand_grid to create a criteria dataframe
expand_grid(
month = c(8,9),
dest = c("SFO", "SJC", "OAK")
)
criteria
## NOTE: No need to change this
assertthat::assert_that(
all_equal(
criteria,
criteria %>%
semi_join(
airports %>%
filter(
str_detect(name, "San Jose") |
str_detect(name, "San Francisco") |
str_detect(name, "Metropolitan Oakland")
),
by = c("dest" = "faa")
)
)
)
assertthat::assert_that(
all_equal(
criteria,
criteria %>% filter(month %in% c(8, 9))
)
)
print("Well done!")
df_q4 <-
flights %>%
semi_join(
criteria,
by = c("dest", "month")
)
df_q4
## NOTE: No need to change this
assertthat::assert_that(
all_equal(
df_q4,
df_q4 %>%
filter(
month %in% c(8, 9),
dest %in% c("SJC", "SFO", "OAK")
)
)
)
print("Nice!")
library(tidyverse)
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = "varang",
values_to = "value",
cols = c(-thick, -rep)
) %>%
separate(
col = varang,
into = c("var", "ang"),
sep = -2,
convert = TRUE
) %>%
pivot_wider(
names_from = var,
values_from = value
)
View(df_stang)
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
cols = c(-thick, -alloy),
names_to = c(".value","Angle"),
values_to = "value",
) %>%
df_stang_long
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
cols = c(-thick, -alloy),
names_to = c(".value","Angle"),
values_to = "value",
) %>%
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","Angle"),
names_sep = "_",
values_to = "value",
cols = c(-thick, -alloy)
) %>%
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
filter(E > 0) %>%
transform(angle = as.integer(angle))
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
# filter(E > 0) %>%
# transform(angle = as.integer(angle))
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
)
# ) %>%
# filter(E > 0) %>%
# transform(angle = as.integer(angle))
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
filter(E > 0) %>%
transform(angle = as.integer(angle))
df_stang_long
library(tidyverse)
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
filter(E > 0) %>%
transform(angle = as.integer(angle))
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
filter(E > 0) %>%
transform(angle = as.integer(angle))
df_stang_long
## NOTE: No need to change this
## Names
assertthat::assert_that(
setequal(
df_stang_long %>% names,
c("thick", "alloy", "angle", "E", "nu")
)
)
## Dimensions
assertthat::assert_that(all(dim(df_stang_long) == c(26, 5)))
## Type
assertthat::assert_that(
(df_stang_long %>% pull(angle) %>% typeof()) == "integer"
)
print("Very good!")
## "One True Value"
## Number of Aluminum alloys
num_alloy <-
df_strand_long %>%
count("alloy")
## "One True Value"
## Number of Aluminum alloys
num_alloy <-
df_stang_long %>%
count("alloy")
num_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_alloy <-
df_stang_long %>%
summarise(alloy)
num_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_alloy <-
df_stang_long %>%
summarise(across(everything(), ~ n_distinct(.)))
num_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_alloy <-
df_stang_long %>%
summarise(across(alloy(), ~ n_distinct(.)))
## "One True Value"
## Number of Aluminum alloys
num_alloy <-
df_stang_long %>%
summarise(across(everything(), ~ n_distinct(.)))
num_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_distinct_values <-
df_stang_long %>%
summarise(across(everything(), ~ n_distinct(.)))
num_distinct_values
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_distinct_values <-
df_stang_long %>%
summarise(down(everything(), ~ n_distinct(.)))
## "One True Value"
## Number of Aluminum alloys
num_distinct_values <-
df_stang_long %>%
summarise(accross(alloy(), ~ n_distinct(.)))
## "One True Value"
## Number of Aluminum alloys
num_distinct_values <-
df_stang_long %>%
summarise(across(alloy(), ~ n_distinct(.)))
?across()
## "One True Value"
## Number of Aluminum alloys
num_distinct_values <-
df_stang_long %>%
summarise(across(c(2), ~ n_distinct(.)))
num_distinct_values
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_distinct_alloy <-
df_stang_long %>%
summarise(across(c(2), ~ n_distinct(.)))
num_distinct_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_distinct_alloy <-
df_stang_long %>%
summarise(across(c(2), ~ n_distinct(.)))
rename(alloy = Number_Of_Distinct_Alloy)
## "One True Value"
## Number of Aluminum alloys
num_distinct_alloy <-
df_stang_long %>%
summarise(across(c(2), ~ n_distinct(.)))
rename(Number_Of_Distinct_Alloy = alloy)
## "One True Value"
## Number of Aluminum alloys
num_distinct_alloy <-
df_stang_long %>%
summarise(across(c(2), ~ n_distinct(.))) %>%
rename(Number_Of_Distinct_Alloy = alloy)
num_distinct_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
num_distinct_alloy <-
df_stang_long %>%
summarise(across(c(2), ~ n_distinct(.))) %>%
rename(Num_Alloys = alloy)
num_distinct_alloy
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## NOTE: No need to change; run this chunk
df_stang_long %>%
ggplot(aes(nu, E, color = as_factor(thick))) +
geom_point(size = 3) +
theme_minimal()
df_stang_long %>% distinct(thick)
## "One True Value"
## Number of Aluminum alloys
df_stang_long %>%
summarise(across(alloy(), ~ n_distinct(.))) %>%
rename(Num_Alloys = alloy)
## "One True Value"
## Number of Aluminum alloys
df_stang_long %>%
distinct(thick)
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## "One True Value"
## Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## Is there "One True Value"
summarise(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
## What thicknesses?
## Average Poisson's Ratio of al_24st
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
mean(nu)
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
mean_nu = mean(nu)
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
mean_nu = mean(nu())
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
mean_nu = mean("nu")
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
mean_nu <-
df_stang_long %>%
mean("nu")
mean_nu
## Is there "One True Value"
glimpse(df_stang_long)
## Get the Number of Aluminum alloys
df_stang_long %>%
distinct(alloy)
## What angles?
df_stang_long %>%
distinct(angle)
## What thicknesses?
df_stang_long %>%
distinct(thick)
## Mean Poisson's Ratio of al_24st
df_stang_long %>%
summarize(nu = mean(nu, na.rm = TRUE))
