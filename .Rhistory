flights %>% vis_central(dep_delay)
## NOTE: No need to change this!
gapminder %>%
filter(year == max(year)) %>%
vis_central(gdpPercap)
## NOTE: No need to change this!
flights %>%
group_by(carrier) %>%
summarize(
mean = mean(dep_delay, na.rm = TRUE),
median = median(dep_delay, na.rm = TRUE)
) %>%
arrange(desc(mean)) %>%
head(5)
## TASK: Duplicate the code above, but sort by `median` instead
flights %>%
group_by(carrier) %>%
summarize(
mean = mean(dep_delay, na.rm = TRUE),
median = median(dep_delay, na.rm = TRUE)
) %>%
arrange(desc(median)) %>%
head(5)
bind_rows(
tibble(X = rnorm(300, mean = -2)),
tibble(X = rnorm(300, mean = +2))
) %>%
ggplot(aes(X)) +
geom_histogram(bins = 60) +
geom_vline(aes(xintercept = mean(X), color = "Mean")) +
geom_vline(aes(xintercept = median(X), color = "Median")) +
scale_color_discrete(name = "Statistic")
## NOTE: No need to change this!
tibble(z = seq(-3, +3, length.out = 500)) %>%
mutate(d = dnorm(z)) %>%
ggplot(aes(z, d)) +
geom_line() +
geom_segment(
data = tibble(p = c(0.25, 0.50, 0.75)) %>%
mutate(
z = qnorm(p),
d = dnorm(z)
),
mapping = aes(xend = z, yend = 0, color = as_factor(p))
) +
scale_color_discrete(name = "Quantile")
## NOTE: No need to change this! Run for an example
flights %>%
pull(dep_delay) %>%
quantile(., probs = c(0, 0.25, 0.50, 0.75, 1.00), na.rm = TRUE)
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- NA_real_
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- NA_real_
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(., probs = c(0, 0.25, 0.50, 0.75, 1.00), na.rm = TRUE)
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(v_test_igr, probs = 0.75) - quantile(v_test_iqr, probs = 0.24)
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(v_test_igr, probs = 0.75) - quantile(v_test_iqr, probs = 0.24)
## NOTE: No need to change this! Run for an example
flights %>%
pull(dep_delay) %>%
quantile(., probs = c(0, 0.25, 0.50, 0.75, 1.00), na.rm = TRUE)
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(v_test_iqr, probs = 0.75) - quantile(v_test_iqr, probs = 0.24)
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(v_test_iqr, probs = 0.75) - quantile(v_test_iqr, probs = 0.24)
## NOTE: No need to change this!
assertthat::assert_that(test_iqr == IQR(v_test_iqr))
## NOTE: No need to change this!
assertthat::assert_that(test_iqr == IQR(v_test_iqr))
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(v_test_iqr, probs = 0.75) - quantile(v_test_iqr, probs = 0.24)
## NOTE: No need to change this!
assertthat::assert_that(test_iqr == IQR(v_test_iqr))
## NOTE: No need to change this!
set.seed(101)
v_test_iqr <- rnorm(n = 10)
## TASK: Compute the interquartile range
test_iqr <- quantile(v_test_iqr, probs = 0.75) - quantile(v_test_iqr, probs = 0.25)
## NOTE: No need to change this!
assertthat::assert_that(test_iqr == IQR(v_test_iqr))
print("Great job!")
## NOTE: No need to change this!
v_base <- c(1, 2, 3, 4, 5)
v_outlier <- c(v_base, 1e3)
tibble(
sd_base = sd(v_base),
IQR_base = IQR(v_base),
sd_outlier = sd(v_outlier),
IQR_outlier = IQR(v_outlier)
) %>% glimpse
## TODO: Use code from q2 to compute the sd and IQR, rank as before
{r q2-task}
## TODO: Use code from q2 to compute the sd and IQR, rank as before
## NOTE: No need to change this!
flights %>%
group_by(carrier) %>%
summarize(
sd = sd(dep_delay, na.rm = TRUE),
IQR = IQR(dep_delay, na.rm = TRUE)
) %>%
arrange(desc(sd)) %>%
head(5)
## TODO: Use code from q2 to compute the sd and IQR, rank as before
flights %>%
group_by(carrier) %>%
summarize(
sd = sd(dep_delay, na.rm = TRUE),
IQR = IQR(dep_delay, na.rm = TRUE)
) %>%
arrange(desc(sd)) %>%
head(5)
flights %>%
ggplot(aes(air_time, distance)) +
geom_point()
## NOTE: No need to change this!
flights %>%
summarize(rho = cor(air_time, distance, use = "na.or.complete"))
## NOTE: No need to change this!
flights %>%
summarize(rho = cor(air_time, month, use = "na.or.complete"))
slope <- 0.5 # Play with this value; observe the correlation
df_line <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = slope * x)
## TASK: Compute the Pearson correlation
df_line %>%
summarize(rho = cor(x, y))
df_line %>%
ggplot(aes(x, y)) +
geom_point()
slope <- 0.8 # Play with this value; observe the correlation
df_line <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = slope * x)
## TASK: Compute the Pearson correlation
df_line %>%
summarize(rho = cor(x, y))
df_line %>%
ggplot(aes(x, y)) +
geom_point()
slope <- 0.2 # Play with this value; observe the correlation
df_line <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = slope * x)
## TASK: Compute the Pearson correlation
df_line %>%
summarize(rho = cor(x, y))
df_line %>%
ggplot(aes(x, y)) +
geom_point()
slope <- 0.5 # Play with this value; observe the correlation
df_line <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = slope * x)
## TASK: Compute the Pearson correlation
df_line %>%
summarize(rho = cor(x, y))
df_line %>%
ggplot(aes(x, y)) +
geom_point()
## NOTE: No need to change this!
map_dfr(
c(-1.0, -0.5, +0.0, +0.5, +1.0), # Chosen correlations
function(r) {
# Simulate a multivariate gaussian
X <- rmvnorm(
n = 100,
sigma = matrix(c(1, r, r, 1), nrow = 2)
)
# Package and return the data
tibble(
x = X[, 1],
y = X[, 2],
r = r
)
}
) %>%
# Plot the data
ggplot(aes(x, y)) +
geom_point() +
facet_wrap(~r)
## NOTE: No need to change this!
# Positive slope
df_monotone <-
tibble(x = seq(-pi/2 + 0.1, +pi/2 - 0.1, length.out = 50)) %>%
mutate(y = tan(x))
df_monotone %>%
ggplot(aes(x, y)) +
geom_point()
# Positive slope
df_monotone %>%
summarize(rho = cor(x, y, method = "pearson"))
df_monotone %>%
summarize(rho = cor(x, y, method = "spearman"))
## NOTE: No need to change this!
df_quad <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = x^2 - 0.5)
## TASK: Compute the Pearson and Spearman correlations on `df_quad`
df_quad %>%
ggplot(aes(x, y)) +
geom_point()
df_monotone %>%
summarize(rho = cor(x, y, method = "spearman"))
## NOTE: No need to change this!
df_quad <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = x^2 - 0.5)
## TASK: Compute the Pearson and Spearman correlations on `df_quad`
df_quad %>%
ggplot(aes(x, y)) +
geom_point()
df_quad %>%
summarize(rho = cor(x, y, method = "pearson"))
df_quad %>%
summarize(rho = cor(x, y, method = "spearman"))
## NOTE: No need to change this!
df_quad <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = x^2 - 0.5)
## TASK: Compute the Pearson and Spearman correlations on `df_quad`
df_quad %>%
ggplot(aes(x, y)) +
geom_point()
df_quad %>%
summarize(rho = cor(x, y, method = "pearson"))
summarize(rho = cor(x, y, method = "spearman"))
## NOTE: No need to change this!
df_quad <-
tibble(x = seq(-1, +1, length.out = 50)) %>%
mutate(y = x^2 - 0.5)
## TASK: Compute the Pearson and Spearman correlations on `df_quad`
df_quad %>%
ggplot(aes(x, y)) +
geom_point()
df_quad %>%
summarize(rho = cor(x, y, method = "pearson"))
df_quad %>%
summarize(rho = cor(x, y, method = "spearman"))
## NOTE: No need to change this!
set.seed(101)
X <- rmvnorm(
n = 25,
sigma = matrix(c(1, 0.9, 0.9, 1), nrow = 2)
)
df_cor_outliers <-
tibble(
x = X[, 1],
y = X[, 2]
) %>%
bind_rows(tibble(x = c(-10.1, -10, 10, 10.1), y = c(-1.2, -1.1, 1.1, 1.2)))
df_cor_outliers %>%
ggplot(aes(x, y)) +
geom_point()
df_cor_outliers %>%
summarize(rho = cor(x, y, method = "pearson"))
df_cor_outliers %>%
summarize(rho = cor(x, y, method = "spearman"))
## NOTE: No need to change this!
set.seed(101)
X <- rmvnorm(
n = 25,
sigma = matrix(c(1, 0.9, 0.9, 1), nrow = 2)
)
df_cor_outliers <-
tibble(
x = X[, 1],
y = X[, 2]
) %>%
bind_rows(tibble(x = c(-10.1, -10, 10, 10.1), y = c(-1.2, -1.1, 1.1, 1.2)))
df_cor_outliers %>%
ggplot(aes(x, y)) +
geom_point()
df_cor_outliers %>%
summarize(rho = cor(x, y, method = "pearson"))
df_cor_outliers %>%
summarize(rho = cor(x, y, method = "spearman"))
# knitr options
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
## NOTE: No need to change this; setup
beatles1 <-
tribble(
~band, ~name,
"Beatles", "John",
"Beatles", "Paul",
"Beatles", "George",
"Beatles", "Ringo"
)
beatles2 <-
tribble(
~surname, ~instrument,
"McCartney",      "bass",
"Harrison",    "guitar",
"Starr",     "drums",
"Lennon",    "guitar"
)
bind_cols(beatles1, beatles2)
## NOTE: No need to change this; setup
beatles3 <-
tribble(
~name, ~surname,
"John", "Lennon",
"Paul", "McCartney",
"George", "Harrison",
"Ringo", "Starr"
)
beatles_joined <-
tribble(
~band, ~name, ~surname, ~instrument,
"Beatles", "John", "Lennon", "guitar",
"Beatles", "Paul", "McCartney", "bass",
"Beatles", "George", "Harrison", "guitar",
"Beatles", "Ringo", "Starr", "drums"
)
df_q2 <-
## TODO: Join beatles1 and beatles2 using beatles3 to match rows
beatles1 %>%
left_join(
beatles3,
by = "name"
) %>%
left_join(
beatles2,
by = "surname"
)
df_q2
## NOTE: No need to change this
assertthat::assert_that(all_equal(df_q2, beatles_joined))
print("Nice!")
criteria <-
## TODO: Use expand_grid to create a criteria dataframe
expand_grid(
month = c(8,9),
dest = c("SFO", "SJC", "OAK")
)
criteria
## NOTE: No need to change this
assertthat::assert_that(
all_equal(
criteria,
criteria %>%
semi_join(
airports %>%
filter(
str_detect(name, "San Jose") |
str_detect(name, "San Francisco") |
str_detect(name, "Metropolitan Oakland")
),
by = c("dest" = "faa")
)
)
)
assertthat::assert_that(
all_equal(
criteria,
criteria %>% filter(month %in% c(8, 9))
)
)
print("Well done!")
df_q4 <-
flights %>%
semi_join(
criteria,
by = c("dest", "month")
)
df_q4
## NOTE: No need to change this
assertthat::assert_that(
all_equal(
df_q4,
df_q4 %>%
filter(
month %in% c(8, 9),
dest %in% c("SJC", "SFO", "OAK")
)
)
)
print("Nice!")
library(tidyverse)
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = "varang",
values_to = "value",
cols = c(-thick, -rep)
) %>%
separate(
col = varang,
into = c("var", "ang"),
sep = -2,
convert = TRUE
) %>%
pivot_wider(
names_from = var,
values_from = value
)
View(df_stang)
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
cols = c(-thick, -alloy),
names_to = c(".value","Angle"),
values_to = "value",
) %>%
df_stang_long
## NOTE: If you extracted all challenges to the same location,
## you shouldn't have to change this filename
filename <- "./data/stang.csv"
## Load the data
df_stang <- read_csv(filename)
df_stang
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
cols = c(-thick, -alloy),
names_to = c(".value","Angle"),
values_to = "value",
) %>%
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","Angle"),
names_sep = "_",
values_to = "value",
cols = c(-thick, -alloy)
) %>%
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
filter(E > 0) %>%
transform(angle = as.integer(angle))
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
# filter(E > 0) %>%
# transform(angle = as.integer(angle))
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
)
# ) %>%
# filter(E > 0) %>%
# transform(angle = as.integer(angle))
df_stang_long
## TASK: Tidy `df_stang`
df_stang_long <-
df_stang %>%
pivot_longer(
names_to = c(".value","angle"),
names_sep = "_",
cols = c(-thick, -alloy)
) %>%
filter(E > 0) %>%
transform(angle = as.integer(angle))
df_stang_long
